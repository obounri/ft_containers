vector features:
arrays that can change in size
Internally, vectors use a dynamically allocated array to store their elements
extra storage to accommodate for possible growth
classes will be in namespace ft

mans nd docs
https://www.cplusplus.com/reference/vector/vector/
AllocatorAwareContainer // https://en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer
https://en.cppreference.com/w/cpp/memory/allocator

vector behavior:
https://stackoverflow.com/questions/17299951/c-vector-what-happens-whenever-it-expands-reallocate-on-stack
vector constructor: https://www.cplusplus.com/reference/vector/vector/vector/
Writing your own STL Container: https://stackoverflow.com/questions/7758580/writing-your-own-stl-container/7759622#7759622

details about iterator_traits:
An Introduction to "Iterator Traits": https://www.codeproject.com/Articles/36530/An-Introduction-to-Iterator-Traits
http://www.cplusplus.com/forum/beginner/43395/
https://en.cppreference.com/w/cpp/iterator/iterator_traits#:~:text=std%3A%3Aiterator_traits%20is%20the,only%20in%20terms%20of%20iterators.
https://en.cppreference.com/w/cpp/iterator/reverse_iterator

Expected implementions for ft::vector :

Public Member functions:
    (constructor)   //  Construct vector k
    (destructor)    //  vector destructor k
    operator=   //  Assign content k

    Iterators:
    begin   //  Return iterator to beginning k
    end //  Return iterator to end k
    rbegin  //  Return reverse iterator to reverse beginning k
    rend    //  Return reverse iterator to reverse end k

    Capacity:
    size    //  Return size k
    max_size    //  Return maximum size k
    resize  //  Change size k
    capacity    //  Return size of allocated storage capacity k
    empty   //  Test whether vector is empty k
    reserve //  Request a change in capacity k

    Element access: non-const all k, const ?
    operator[] // does not check bounds 
    at // checks bounds 
    front   //  Access first element // Calling this function on an empty container causes undefined behavior.
    back    //  Access last element // Calling this function on an empty container causes undefined behavior.

    Modifiers:
    assign  //  Assign vector content
    push_back   //  Add element at the end
    pop_back    //  Delete last element
    insert  //  Insert elements
    erase   //  Erase elements
    swap    //  Swap content
    clear   //  Clear content

    Allocator:
    get_allocator   //  Get allocator

Non-member function overloads:
    relational operators    //  Relational operators for vector (function template )
    swap    //  Exchange contents of vectors (function template )

a bit deeper into c++:
destruction and built-in types: https://stackoverflow.com/questions/71010802/will-destructor-delete-built-in-types-and-pointer-objects
allocator: http://candcplusplus.com/c-allocator-class-member-functions
iterators and reallocation: https://stackoverflow.com/questions/36300745/how-do-iterators-update-after-vector-reallocation
insert(), emplace_back(), emplace(), push_back(), erase(), pop_back(), resize(), clear() invalidate iterators, references and pointers

For map:
    data-structures: https://github.com/Bibeknam/algorithmtutorprograms
    binary search tree:
    https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/
    AVL tree - balanced binary search tree:
    https://www.youtube.com/watch?v=vRwi_UcZGjU&ab_channel=BackToBackSWE
    https://www.youtube.com/watch?v=FNeL18KsWPc&ab_channel=MITOpenCourseWare
    https://progmohamedali.wordpress.com/2013/03/20/third-semester-project/
    Red-Black trees
    https://www.youtube.com/watch?v=nMExd4DthdA&list=PLpPXw4zFa0uKKhaSz87IowJnOTzh9tiBk&index=67&ab_channel=RobEdwards
    https://www.youtube.com/watch?v=v6eDztNiJwo&list=PLpPXw4zFa0uKKhaSz87IowJnOTzh9tiBk&index=67&ab_channel=RobEdwards
    https://www.youtube.com/watch?v=-qjrcxVmf2Q&list=PLpPXw4zFa0uKKhaSz87IowJnOTzh9tiBk&index=68&ab_channel=RobEdwards
    https://tildesites.bowdoin.edu/~ltoma/teaching/cs231/fall16/Lectures/05-BST/rbtrees.pdf
    https://courses.cs.duke.edu/cps100e/fall98/lects/sect17rbtreeH.pdf
    https://www.programiz.com/dsa/deletion-from-a-red-black-tree

enable_if:
https://www.youtube.com/watch?v=H-m23Vvzcug&ab_channel=CppinDetail